2020-05-02_13:10:20.08306 LOG:  listening on Unix socket "/var/opt/gitlab/postgresql/.s.PGSQL.5432"
2020-05-02_13:10:21.38458 LOG:  database system was interrupted; last known up at 2020-04-29 09:16:12 GMT
2020-05-02_13:10:33.58941 FATAL:  the database system is starting up
2020-05-02_13:10:34.61403 FATAL:  the database system is starting up
2020-05-02_13:10:36.61626 FATAL:  the database system is starting up
2020-05-02_13:10:37.06281 FATAL:  the database system is starting up
2020-05-02_13:10:37.06592 FATAL:  the database system is starting up
2020-05-02_13:10:37.08538 FATAL:  the database system is starting up
2020-05-02_13:10:44.69503 LOG:  database system was not properly shut down; automatic recovery in progress
2020-05-02_13:10:44.72021 LOG:  redo starts at 0/2226C60
2020-05-02_13:10:44.76443 LOG:  invalid record length at 0/2228AE0: wanted 24, got 0
2020-05-02_13:10:44.76445 LOG:  redo done at 0/2228AB8
2020-05-02_13:10:44.76445 LOG:  last completed transaction was at log time 2020-04-29 09:17:28.813733+00
2020-05-02_13:10:44.97805 LOG:  database system is ready to accept connections
2020-05-02_04:17:39.39920 LOG:  stats collector's time 2020-05-02 13:17:21.103283+00 is later than backend local time 2020-05-02 04:17:39.39518+00
2020-05-02_04:17:39.39931 STATEMENT:            SELECT relname,seq_tup_read,idx_tup_fetch,n_tup_ins,n_tup_upd,n_tup_del,n_tup_hot_upd,n_dead_tup,seq_scan
2020-05-02_04:17:39.39934 	          FROM pg_stat_user_tables
2020-05-02_04:17:39.39935 	          WHERE relname IN (SELECT tablename FROM pg_tables WHERE tableowner = 'gitlab')
2020-05-02_04:17:39.39939 	          GROUP BY relname,seq_tup_read,idx_tup_fetch,n_tup_ins,n_tup_upd,n_tup_del,n_tup_hot_upd,n_dead_tup,seq_scan
2020-05-02_04:17:39.39942 	
2020-05-02_04:17:39.39943 LOG:  stats_timestamp 2020-05-02 13:17:21.103283+00 is later than collector's time 2020-05-02 04:17:39.398392+00 for database 16385
2020-05-02_04:17:51.89924 LOG:  stats collector's time 2020-05-02 13:17:33.606639+00 is later than backend local time 2020-05-02 04:17:51.89891+00
2020-05-02_04:17:51.89926 STATEMENT:  with table_opts_vs_statistic as (
2020-05-02_04:17:51.89927 	  select
2020-05-02_04:17:51.89927 	    pg_class.oid,
2020-05-02_04:17:51.89927 	    pg_class.relname,
2020-05-02_04:17:51.89928 	    coalesce(nspname, 'public') as schemaname,
2020-05-02_04:17:51.89928 	    pg_class.relpages,
2020-05-02_04:17:51.89929 	    pg_class.reltuples,
2020-05-02_04:17:51.89929 	    case
2020-05-02_04:17:51.89930 	      when array_to_string(reloptions, '') like '%autovacuum_vacuum_threshold%' then regexp_replace(array_to_string(reloptions, ''), '.*autovacuum_vacuum_threshold=([0-9.]+).*', E'\\1')::int8
2020-05-02_04:17:51.89930 	      else current_setting('autovacuum_vacuum_threshold')::int8
2020-05-02_04:17:51.89931 	    end as autovacuum_vacuum_threshold,
2020-05-02_04:17:51.89931 	    case
2020-05-02_04:17:51.89931 	      when array_to_string(reloptions, '') like '%autovacuum_vacuum_scale_factor%' then regexp_replace(array_to_string(reloptions, ''), '.*autovacuum_vacuum_scale_factor=([0-9.]+).*', E'\\1')::numeric
2020-05-02_04:17:51.89932 	      else current_setting('autovacuum_vacuum_scale_factor')::numeric
2020-05-02_04:17:51.89932 	    end as autovacuum_vacuum_scale_factor,
2020-05-02_04:17:51.89933 	    case when array_to_string(reloptions, '') ~ 'autovacuum_enabled=(false|off)' then false else true end as autovacuum_enabled,
2020-05-02_04:17:51.89935 	    n_dead_tup,
2020-05-02_04:17:51.89935 	    last_autovacuum,
2020-05-02_04:17:51.89936 	    last_vacuum
2020-05-02_04:17:51.89936 	  from pg_class
2020-05-02_04:17:51.89937 	  join pg_namespace ns on relnamespace = ns.oid 
2020-05-02_04:17:51.89937 	  join pg_stat_all_tables psat  on psat.relid  = pg_class.oid
2020-05-02_04:17:51.89938 	  where relkind in ('r','m') 
2020-05-02_04:17:51.89938 	), p as (
2020-05-02_04:17:51.89938 	  select pgspv.*,a.query,a.wait_event_type,a.wait_event,a.query_start
2020-05-02_04:17:51.89939 	  from pg_stat_progress_vacuum pgspv
2020-05-02_04:17:51.89939 	  left join pg_stat_activity a using (pid)
2020-05-02_04:17:51.89941 	) 
2020-05-02_04:17:51.89941 	select
2020-05-02_04:17:51.89942 	  table_opts_vs_statistic.schemaname as schemaname,
2020-05-02_04:17:51.89942 	  table_opts_vs_statistic.relname as relname,
2020-05-02_04:17:51.89943 	  round((100 * table_opts_vs_statistic.n_dead_tup::numeric / nullif(table_opts_vs_statistic.reltuples, 0))::numeric, 2) as dead_tup_pct,
2020-05-02_04:17:51.89943 	  table_opts_vs_statistic.reltuples::numeric as reltuples,
2020-05-02_04:17:51.89944 	  table_opts_vs_statistic.n_dead_tup,
2020-05-02_04:17:51.89944 	  (relpages::bigint*8*1024) AS table_size_bytes,
2020-05-02_04:17:51.89944 	  'V. Threshold:' || table_opts_vs_statistic.autovacuum_vacuum_threshold
2020-05-02_04:17:51.89945 	    || ', V. Scale Factor: ' || (table_opts_vs_statistic.autovacuum_vacuum_scale_factor)::numeric *100 ||' %'
2020-05-02_04:17:51.89945 	    || case when not autovacuum_enabled then ', DISABLED' else ', enabled' end as "effective_settings",
2020-05-02_04:17:51.89947 	  case
2020-05-02_04:17:51.89948 	    when last_autovacuum > coalesce(last_vacuum, '0001-01-01') then last_autovacuum::timestamp(0)
2020-05-02_04:17:51.89948 	    when last_vacuum is not null then last_vacuum::timestamp(0)
2020-05-02_04:17:51.89949 	    else null
2020-05-02_04:17:51.89949 	  end as "last_vacuumed",
2020-05-02_04:17:51.89950 	  case
2020-05-02_04:17:51.89950 	    when last_autovacuum > coalesce(last_vacuum, '0001-01-01') then 'auto'
2020-05-02_04:17:51.89951 	    when last_vacuum is not null then 'manual'
2020-05-02_04:17:51.89951 	    else null
2020-05-02_04:17:51.89951 	  end as "type",
2020-05-02_04:17:51.89952 	  coalesce(p.phase, 'in queue') as status,
2020-05-02_04:17:51.89952 	  p.pid as pid,
2020-05-02_04:17:51.89953 	  coalesce  (p.query,'')as  action,
2020-05-02_04:17:51.89953 	  case when p.pid is null then null else coalesce(wait_event_type ||'.'|| wait_event, 'f') end as waiting,
2020-05-02_04:17:51.89954 	  round(100.0 * p.heap_blks_scanned / nullif(p.heap_blks_total, 0), 1) AS scanned_pct,
2020-05-02_04:17:51.89954 	  round(100.0 * p.heap_blks_vacuumed / nullif(p.heap_blks_total, 0), 1) AS vacuumed_pct,
2020-05-02_04:17:51.89955 	  extract ('epoch' from  now()-query_start) elapsed_time
2020-05-02_04:17:51.89955 	from 
2020-05-02_04:17:51.89956 	table_opts_vs_statistic
2020-05-02_04:17:51.89956 	full outer join p on p.relid = table_opts_vs_statistic.oid and p.datname = current_database()
2020-05-02_04:17:51.89958 	where
2020-05-02_04:17:51.89958 	  table_opts_vs_statistic.relpages >= 8
2020-05-02_04:17:51.89959 	  and  autovacuum_vacuum_threshold + (autovacuum_vacuum_scale_factor::numeric * table_opts_vs_statistic.reltuples) < table_opts_vs_statistic.n_dead_tup
2020-05-02_04:17:51.89959 	
2020-05-02_04:17:51.90013 LOG:  stats_timestamp 2020-05-02 13:17:33.606639+00 is later than collector's time 2020-05-02 04:17:51.899597+00 for database 13214
