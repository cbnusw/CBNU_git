{
  "name": "Hy",
  "scopeName": "source.hy",
  "patterns": [
    {
      "include": "#comment"
    },
    {
      "include": "#shebang-comment"
    },
    {
      "include": "#quoted-sexp"
    },
    {
      "include": "#sexp"
    },
    {
      "include": "#keyfn"
    },
    {
      "include": "#string"
    },
    {
      "include": "#vector"
    },
    {
      "include": "#set"
    },
    {
      "include": "#map"
    },
    {
      "include": "#regexp"
    },
    {
      "include": "#var"
    },
    {
      "include": "#constants"
    },
    {
      "include": "#dynamic-variables"
    },
    {
      "include": "#metadata"
    },
    {
      "include": "#namespace-symbol"
    },
    {
      "include": "#symbol"
    }
  ],
  "repository": {
    "comment": {
      "name": "comment.line.semicolon.hy",
      "begin": "(?\u003c!\\\\);",
      "end": "$",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.comment.hy"
        }
      }
    },
    "constants": {
      "patterns": [
        {
          "name": "constant.language.nil.hy",
          "match": "(nil)(?=(\\s|\\)|\\]|\\}))"
        },
        {
          "name": "constant.language.boolean.hy",
          "match": "(True|False)"
        },
        {
          "name": "constant.numeric.ratio.hy",
          "match": "(-?\\d+/\\d+)"
        },
        {
          "name": "constant.numeric.arbitrary-radix.hy",
          "match": "(-?\\d+[rR][0-9a-zA-Z]+)"
        },
        {
          "name": "constant.numeric.hexadecimal.hy",
          "match": "(-?0[xX][0-9a-fA-F]+)"
        },
        {
          "name": "constant.numeric.octal.hy",
          "match": "(-?0\\d+)"
        },
        {
          "name": "constant.numeric.bigdecimal.hy",
          "match": "(-?\\d+\\.\\d+([eE][+-]?\\d+)?M)"
        },
        {
          "name": "constant.numeric.double.hy",
          "match": "(-?\\d+\\.\\d+([eE][+-]?\\d+)?)"
        },
        {
          "name": "constant.numeric.bigint.hy",
          "match": "(-?\\d+N)"
        },
        {
          "name": "constant.numeric.long.hy",
          "match": "(-?\\d+)"
        },
        {
          "include": "#keyword"
        }
      ]
    },
    "dynamic-variables": {
      "name": "meta.symbol.dynamic.hy",
      "match": "\\*[\\w\\.\\-\\_\\:\\+\\=\\\u003e\\\u003c\\!\\?\\d]+\\*"
    },
    "keyfn": {
      "patterns": [
        {
          "name": "storage.control.hy",
          "match": "(?\u003c=(\\s|\\(|\\[|\\{))(if(-[-a-z\\?]*)?|when(-[-a-z]*)?|for(-[-a-z]*)?|cond|do|let(-[-a-z\\?]*)?|binding|loop|recur|fn|throw[a-z\\-]*|try|catch|finally|([a-z]*case))(?=(\\s|\\)|\\]|\\}))"
        },
        {
          "name": "keyword.control.hy",
          "match": "(?\u003c=(\\s|\\(|\\[|\\{))(declare-?|(in-)?ns|import|use|require|load|compile|(def[a-z\\-]*))(?=(\\s|\\)|\\]|\\}))"
        }
      ]
    },
    "keyword": {
      "name": "constant.keyword.hy",
      "match": "(?\u003c=(\\s|\\(|\\[|\\{)):[a-zA-Z0-9\\#\\.\\-\\_\\:\\+\\=\\\u003e\\\u003c\\/\\!\\?\\*]+(?=(\\s|\\)|\\]|\\}|\\,))"
    },
    "map": {
      "name": "meta.map.hy",
      "begin": "(\\{)",
      "end": "(\\}(?=[\\}\\]\\)\\s]*(?:;|$)))|(\\})",
      "patterns": [
        {
          "include": "$self"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "punctuation.section.map.begin.hy"
        }
      },
      "endCaptures": {
        "1": {
          "name": "punctuation.section.map.end.trailing.hy"
        },
        "2": {
          "name": "punctuation.section.map.end.hy"
        }
      }
    },
    "metadata": {
      "patterns": [
        {
          "name": "meta.metadata.map.hy",
          "begin": "(\\^\\{)",
          "end": "(\\}(?=[\\}\\]\\)\\s]*(?:;|$)))|(\\})",
          "patterns": [
            {
              "include": "$self"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "punctuation.section.metadata.map.begin.hy"
            }
          },
          "endCaptures": {
            "1": {
              "name": "punctuation.section.metadata.map.end.trailing.hy"
            },
            "2": {
              "name": "punctuation.section.metadata.map.end.hy"
            }
          }
        },
        {
          "name": "meta.metadata.simple.hy",
          "begin": "(\\^)",
          "end": "(\\s)",
          "patterns": [
            {
              "include": "#keyword"
            },
            {
              "include": "$self"
            }
          ]
        }
      ]
    },
    "namespace-symbol": {
      "patterns": [
        {
          "match": "([a-zA-Z\\.\\-\\_\\+\\=\\\u003e\\\u003c\\!\\?\\*][\\w\\.\\-\\_\\:\\+\\=\\\u003e\\\u003c\\!\\?\\*\\d]*)/",
          "captures": {
            "1": {
              "name": "meta.symbol.namespace.hy"
            }
          }
        }
      ]
    },
    "quoted-sexp": {
      "name": "meta.quoted-expression.hy",
      "begin": "(['``]\\()",
      "end": "(\\))$|(\\)(?=[\\}\\]\\)\\s]*(?:;|$)))|(\\))",
      "patterns": [
        {
          "include": "$self"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "punctuation.section.expression.begin.hy"
        }
      },
      "endCaptures": {
        "1": {
          "name": "punctuation.section.expression.end.trailing.hy"
        },
        "2": {
          "name": "punctuation.section.expression.end.trailing.hy"
        },
        "3": {
          "name": "punctuation.section.expression.end.hy"
        }
      }
    },
    "regexp": {
      "name": "string.regexp.hy",
      "begin": "#\"",
      "end": "\"",
      "patterns": [
        {
          "include": "#regexp_escaped_char"
        }
      ],
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.regexp.begin.hy"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.regexp.end.hy"
        }
      }
    },
    "regexp_escaped_char": {
      "name": "constant.character.escape.hy",
      "match": "\\\\."
    },
    "set": {
      "name": "meta.set.hy",
      "begin": "(\\#\\{)",
      "end": "(\\}(?=[\\}\\]\\)\\s]*(?:;|$)))|(\\})",
      "patterns": [
        {
          "include": "$self"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "punctuation.section.set.begin.hy"
        }
      },
      "endCaptures": {
        "1": {
          "name": "punctuation.section.set.end.trailing.hy"
        },
        "2": {
          "name": "punctuation.section.set.end.hy"
        }
      }
    },
    "sexp": {
      "name": "meta.expression.hy",
      "begin": "(\\()",
      "end": "(\\))$|(\\)(?=[\\}\\]\\)\\s]*(?:;|$)))|(\\))",
      "patterns": [
        {
          "name": "meta.definition.global.hy",
          "begin": "(?\u003c=\\()(ns|declare|def[\\w\\d._:+=\u003e\u003c!?*-]*|[\\w._:+=\u003e\u003c!?*-][\\w\\d._:+=\u003e\u003c!?*-]*/def[\\w\\d._:+=\u003e\u003c!?*-]*)\\s+",
          "end": "(?=\\))",
          "patterns": [
            {
              "include": "#metadata"
            },
            {
              "include": "#dynamic-variables"
            },
            {
              "name": "entity.global.hy",
              "match": "([a-zA-Z\\.\\-\\_\\+\\=\\\u003e\\\u003c\\!\\?\\*][\\w\\.\\-\\_\\:\\+\\=\\\u003e\\\u003c\\!\\?\\*\\d]*)"
            },
            {
              "include": "$self"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.control.hy"
            }
          }
        },
        {
          "include": "#keyfn"
        },
        {
          "include": "#constants"
        },
        {
          "include": "#vector"
        },
        {
          "include": "#map"
        },
        {
          "include": "#set"
        },
        {
          "include": "#sexp"
        },
        {
          "match": "(?\u003c=\\()(.+?)(?=\\s|\\))",
          "patterns": [
            {
              "include": "$self"
            }
          ],
          "captures": {
            "1": {
              "name": "entity.name.function.hy"
            }
          }
        },
        {
          "include": "$self"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "punctuation.section.expression.begin.hy"
        }
      },
      "endCaptures": {
        "1": {
          "name": "punctuation.section.expression.end.trailing.hy"
        },
        "2": {
          "name": "punctuation.section.expression.end.trailing.hy"
        },
        "3": {
          "name": "punctuation.section.expression.end.hy"
        }
      }
    },
    "shebang-comment": {
      "name": "comment.line.shebang.hy",
      "begin": "^(#!)",
      "end": "$",
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.comment.shebang.hy"
        }
      }
    },
    "string": {
      "name": "string.quoted.double.hy",
      "begin": "(?\u003c!\\\\)(\")",
      "end": "(\")",
      "patterns": [
        {
          "name": "constant.character.escape.hy",
          "match": "\\\\."
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.string.begin.hy"
        }
      },
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.string.end.hy"
        }
      }
    },
    "symbol": {
      "patterns": [
        {
          "name": "meta.symbol.hy",
          "match": "([a-zA-Z\\.\\-\\_\\+\\=\\\u003e\\\u003c\\!\\?\\*][\\w\\.\\-\\_\\:\\+\\=\\\u003e\\\u003c\\!\\?\\*\\d]*)"
        }
      ]
    },
    "var": {
      "name": "meta.var.hy",
      "match": "(?\u003c=(\\s|\\(|\\[|\\{)\\#)'[a-zA-Z0-9\\.\\-\\_\\:\\+\\=\\\u003e\\\u003c\\/\\!\\?\\*]+(?=(\\s|\\)|\\]|\\}))"
    },
    "vector": {
      "name": "meta.vector.hy",
      "begin": "(\\[)",
      "end": "(\\](?=[\\}\\]\\)\\s]*(?:;|$)))|(\\])",
      "patterns": [
        {
          "include": "$self"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "punctuation.section.vector.begin.hy"
        }
      },
      "endCaptures": {
        "1": {
          "name": "punctuation.section.vector.end.trailing.hy"
        },
        "2": {
          "name": "punctuation.section.vector.end.hy"
        }
      }
    }
  }
}
