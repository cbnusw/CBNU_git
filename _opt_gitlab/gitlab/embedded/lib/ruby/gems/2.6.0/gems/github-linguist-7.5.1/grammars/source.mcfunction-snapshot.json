{
  "name": "mcfunction-snapshot",
  "scopeName": "source.mcfunction-snapshot",
  "patterns": [
    {
      "include": "#comment"
    },
    {
      "include": "#command"
    },
    {
      "include": "#unknown"
    }
  ],
  "repository": {
    "advancement_map.content": {
      "patterns": [
        {
          "include": "#common.block"
        }
      ]
    },
    "command": {
      "name": "meta._.command.mcfunction",
      "begin": "^[ \\t]*(?=[^\\s\\#])",
      "end": "\\n",
      "patterns": [
        {
          "include": "#commands"
        }
      ]
    },
    "commands": {
      "patterns": [
        {
          "include": "#generated.commands"
        }
      ]
    },
    "comment": {
      "patterns": [
        {
          "name": "meta._.comment.mcfunction",
          "begin": "^[ \\t]*(?=\\#)",
          "end": "\\n",
          "patterns": [
            {
              "include": "#comments"
            }
          ]
        }
      ]
    },
    "comment.annotation": {
      "name": "meta._.annotation.comment.mcfunction",
      "match": "(#)[ \\t]*(\\@\\w*)(\\b.*)$",
      "captures": {
        "1": {
          "name": "comment._.comment.mcfunction"
        },
        "2": {
          "name": "markup.heading._.name.annotation.comment.mcfunction"
        },
        "3": {
          "name": "comment._.text.annotation.comment.mcfunction"
        }
      }
    },
    "comment.heading": {
      "name": "meta._.heading.comment.mcfunction",
      "match": "(##)[ \\t]*(.*)$",
      "captures": {
        "1": {
          "name": "comment._.comment.mcfunction"
        },
        "2": {
          "name": "markup.heading._.heading.comment.mcfunction"
        }
      }
    },
    "comment.marker": {
      "name": "meta._.marker.comment.mcfunction",
      "match": "(#)[ \\t]*((?:TODO|FIXME|XXX))(\\b.*)$",
      "captures": {
        "1": {
          "name": "comment._.comment.mcfunction"
        },
        "2": {
          "name": "markup.bold._.name.marker.comment.mcfunction"
        },
        "3": {
          "name": "comment._.text.marker.comment.mcfunction"
        }
      }
    },
    "comment.other": {
      "name": "meta._.other.comment.mcfunction",
      "match": "(#.*)$",
      "captures": {
        "1": {
          "name": "comment._.comment.mcfunction"
        }
      }
    },
    "comments": {
      "patterns": [
        {
          "include": "#comment.heading"
        },
        {
          "include": "#comment.marker"
        },
        {
          "include": "#comment.annotation"
        },
        {
          "include": "#comment.other"
        }
      ]
    },
    "common.block": {
      "patterns": [
        {
          "name": "string._.content.dict.generic.mcfunction",
          "match": "[^\\n\\{\\}\\[\\]\\\"\\']+"
        },
        {
          "include": "#common.dict"
        },
        {
          "include": "#common.list"
        },
        {
          "include": "#common.quoted_string"
        }
      ]
    },
    "common.boolean": {
      "patterns": [
        {
          "name": "constant.numeric._.boolean.mcfunction",
          "match": "(?\u003c!\\w)(true|false)(?!\\w)"
        }
      ]
    },
    "common.dict": {
      "patterns": [
        {
          "begin": "(\\{)",
          "end": "(?=\\n)|(\\})",
          "patterns": [
            {
              "include": "#common.block"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "storage._.bracket.dict.generic.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "storage._.bracket.dict.generic.mcfunction"
            }
          }
        }
      ]
    },
    "common.dict.whitespace": {
      "patterns": [
        {
          "match": "(?\u003c=[\\{\\,]) +(?=[^\\}\\,])"
        },
        {
          "match": "(?\u003c=[^\\{\\,]) +(?=[\\}\\,])"
        },
        {
          "match": "(?\u003c=\\{) +(?=\\})"
        }
      ]
    },
    "common.double_quoted_string": {
      "patterns": [
        {
          "begin": "(\\\")",
          "end": "(?=\\n)|(\\\")",
          "patterns": [
            {
              "include": "#common.double_quoted_string.content"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            }
          }
        }
      ]
    },
    "common.double_quoted_string.content": {
      "patterns": [
        {
          "name": "string._.string.mcfunction",
          "match": "[^\\\\\\\"\\n]"
        },
        {
          "name": "constant.character.escape._.string_escape.mcfunction",
          "match": "\\\\[^\\n]"
        },
        {
          "match": "((\\\\))",
          "captures": {
            "1": {
              "name": "invalid.illegal._.invalid.mcfunction"
            },
            "2": {
              "name": "markup.underline._.underline.mcfunction"
            }
          }
        }
      ]
    },
    "common.double_range": {
      "patterns": [
        {
          "match": "(\\-?\\d*\\.?\\d+)(\\.\\.)(\\-?\\d*\\.?\\d+)?",
          "captures": {
            "1": {
              "name": "constant.numeric._.minimum.range.mcfunction"
            },
            "2": {
              "name": "keyword.control._.ellipsis.range.mcfunction"
            },
            "3": {
              "name": "constant.numeric._.maximum.range.mcfunction"
            }
          }
        },
        {
          "match": "(\\-?\\d*\\.?\\d+)?(\\.\\.)(\\-?\\d*\\.?\\d+)",
          "captures": {
            "1": {
              "name": "constant.numeric._.minimum.range.mcfunction"
            },
            "2": {
              "name": "keyword.control._.ellipsis.range.mcfunction"
            },
            "3": {
              "name": "constant.numeric._.maximum.range.mcfunction"
            }
          }
        },
        {
          "name": "constant.numeric._.number.mcfunction",
          "match": "(\\-?\\d*\\.?\\d+)"
        }
      ]
    },
    "common.integer_range": {
      "patterns": [
        {
          "match": "(\\-?\\d*)(\\.\\.)(\\-?\\d*)?",
          "captures": {
            "1": {
              "name": "constant.numeric._.minimum.range.mcfunction"
            },
            "2": {
              "name": "keyword.control._.ellipsis.range.mcfunction"
            },
            "3": {
              "name": "constant.numeric._.maximum.range.mcfunction"
            }
          }
        },
        {
          "match": "(\\-?\\d*)?(\\.\\.)(\\-?\\d*)",
          "captures": {
            "1": {
              "name": "constant.numeric._.minimum.range.mcfunction"
            },
            "2": {
              "name": "keyword.control._.ellipsis.range.mcfunction"
            },
            "3": {
              "name": "constant.numeric._.maximum.range.mcfunction"
            }
          }
        },
        {
          "name": "constant.numeric._.number.mcfunction",
          "match": "(\\-?\\d*)"
        }
      ]
    },
    "common.list": {
      "patterns": [
        {
          "begin": "(\\[)",
          "end": "(?=\\n)|(\\])",
          "patterns": [
            {
              "include": "#common.block"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "storage._.bracket.list.generic.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "storage._.bracket.list.generic.mcfunction"
            }
          }
        }
      ]
    },
    "common.list.whitespace": {
      "patterns": [
        {
          "match": "(?\u003c=[\\[\\,]) +(?=[^\\]\\,])"
        },
        {
          "match": "(?\u003c=[^\\[\\,]) +(?=[\\]\\,])"
        },
        {
          "match": "(?\u003c=\\[) +(?=\\])"
        }
      ]
    },
    "common.message": {
      "patterns": [
        {
          "name": "string._.string.mcfunction",
          "match": "([^\\@\\n]+)"
        },
        {
          "begin": "(\\@[parse])(\\[)(?= *[\\w\\]])",
          "end": "(?=\\n)|(\\])",
          "patterns": [
            {
              "include": "#target_selector.content"
            },
            {
              "include": "#error.command_line"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.bracket.target_selector.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "support.class._.bracket.target_selector.mcfunction"
            }
          }
        },
        {
          "name": "support.class._.base.target_selector.mcfunction",
          "match": "(\\@[parse])"
        },
        {
          "name": "string._.string.mcfunction",
          "match": "([^\\n])"
        }
      ]
    },
    "common.number": {
      "patterns": [
        {
          "name": "constant.numeric._.number.mcfunction",
          "match": "(?\u003c!\\d)(\\-?\\d*\\.?\\d+)(?!\\d)"
        }
      ]
    },
    "common.position": {
      "patterns": [
        {
          "include": "#common.position.abs_rel"
        },
        {
          "include": "#common.position.local"
        }
      ]
    },
    "common.position.abs_rel": {
      "patterns": [
        {
          "match": "(?:(\\~)(\\-?\\d*\\.?\\d+)?|(\\-?\\d*\\.?\\d+)) (?:(\\~)(\\-?\\d*\\.?\\d+)?|(\\-?\\d*\\.?\\d+)) (?:(\\~)(\\-?\\d*\\.?\\d+)?|(\\-?\\d*\\.?\\d+))",
          "captures": {
            "1": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "3": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "4": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "5": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "7": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "8": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "9": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            }
          }
        }
      ]
    },
    "common.position.local": {
      "patterns": [
        {
          "match": "(\\^)(\\-?\\d*\\.?\\d+)? (\\^)(\\-?\\d*\\.?\\d+)? (\\^)(\\-?\\d*\\.?\\d+)?",
          "captures": {
            "1": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "3": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "4": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "5": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            }
          }
        }
      ]
    },
    "common.quotable_string": {
      "patterns": [
        {
          "include": "#common.quoted_string"
        },
        {
          "include": "#common.unquoted_string"
        }
      ]
    },
    "common.quoted_string": {
      "patterns": [
        {
          "include": "#common.double_quoted_string"
        },
        {
          "include": "#common.single_quoted_string"
        }
      ]
    },
    "common.resource_location": {
      "patterns": [
        {
          "match": "([a-z0-9_\\.\\-]+)?(\\:)?([a-z0-9_\\.\\-\\/]+)",
          "captures": {
            "1": {
              "name": "entity.name.function._.namespace.resource_location.mcfunction"
            },
            "2": {
              "name": "entity.name.function._.colon.resource_location.mcfunction"
            },
            "3": {
              "name": "entity.name.function._.path.resource_location.mcfunction"
            }
          }
        }
      ]
    },
    "common.single_quoted_string": {
      "patterns": [
        {
          "begin": "(\\')",
          "end": "(?=\\n)|(\\')",
          "patterns": [
            {
              "include": "#common.single_quoted_string.content"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            }
          }
        }
      ]
    },
    "common.single_quoted_string.content": {
      "patterns": [
        {
          "name": "string._.string.mcfunction",
          "match": "[^\\\\\\'\\n]"
        },
        {
          "name": "constant.character.escape._.string_escape.mcfunction",
          "match": "\\\\[^\\n]"
        },
        {
          "match": "((\\\\))",
          "captures": {
            "1": {
              "name": "invalid.illegal._.invalid.mcfunction"
            },
            "2": {
              "name": "markup.underline._.underline.mcfunction"
            }
          }
        }
      ]
    },
    "common.taggable_resource_location": {
      "patterns": [
        {
          "include": "#common.tagged_resource_location"
        },
        {
          "include": "#common.resource_location"
        }
      ]
    },
    "common.tagged_resource_location": {
      "patterns": [
        {
          "match": "(\\#)([a-z0-9_\\.\\-]+)?(\\:)?([a-z0-9_\\.\\-\\/]+)",
          "captures": {
            "1": {
              "name": "entity.name.function._.hash.resource_location.mcfunction"
            },
            "2": {
              "name": "entity.name.function._.namespace.resource_location.mcfunction"
            },
            "3": {
              "name": "entity.name.function._.colon.resource_location.mcfunction"
            },
            "4": {
              "name": "entity.name.function._.path.resource_location.mcfunction"
            }
          }
        }
      ]
    },
    "common.unquoted_string": {
      "patterns": [
        {
          "name": "string._.word.mcfunction",
          "match": "([\\w\\.\\-\\+]+)"
        }
      ]
    },
    "error.block": {
      "patterns": [
        {
          "match": "(([^\\n\\{\\}\\[\\]\\\"\\']+))",
          "captures": {
            "1": {
              "name": "invalid.illegal._.invalid.mcfunction"
            },
            "2": {
              "name": "markup.underline._.underline.mcfunction"
            }
          }
        },
        {
          "include": "#error.block_value"
        }
      ]
    },
    "error.block_value": {
      "patterns": [
        {
          "include": "#error.dict"
        },
        {
          "include": "#error.list"
        },
        {
          "include": "#error.quoted_string"
        }
      ]
    },
    "error.command_line": {
      "name": "meta._.unknown_command.mcfunction",
      "match": "((.*))$",
      "captures": {
        "1": {
          "name": "invalid.illegal._.invalid.mcfunction"
        },
        "2": {
          "name": "markup.underline._.underline.mcfunction"
        }
      }
    },
    "error.compound_value": {
      "patterns": [
        {
          "include": "#error.block_value"
        },
        {
          "match": "(([^\\n\\}\\,]))",
          "captures": {
            "1": {
              "name": "invalid.illegal._.invalid.mcfunction"
            },
            "2": {
              "name": "markup.underline._.underline.mcfunction"
            }
          }
        }
      ]
    },
    "error.dict": {
      "patterns": [
        {
          "begin": "((\\{))",
          "end": "((?=\\n)|(\\}))",
          "patterns": [
            {
              "include": "#error.block"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "invalid.illegal._.invalid.mcfunction"
            },
            "2": {
              "name": "markup.underline._.underline.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "invalid.illegal._.invalid.mcfunction"
            },
            "2": {
              "name": "markup.underline._.underline.mcfunction"
            }
          }
        }
      ]
    },
    "error.double_quoted_string": {
      "patterns": [
        {
          "begin": "((\\\"))",
          "end": "((?=\\n)|(\\\"))",
          "patterns": [
            {
              "include": "#error.double_quoted_string.content"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "invalid.illegal._.invalid.mcfunction"
            },
            "2": {
              "name": "markup.underline._.underline.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "invalid.illegal._.invalid.mcfunction"
            },
            "2": {
              "name": "markup.underline._.underline.mcfunction"
            }
          }
        }
      ]
    },
    "error.double_quoted_string.content": {
      "patterns": [
        {
          "match": "(([^\\\\\\\"\\n]))",
          "captures": {
            "1": {
              "name": "invalid.illegal._.invalid.mcfunction"
            },
            "2": {
              "name": "markup.underline._.underline.mcfunction"
            }
          }
        },
        {
          "match": "((\\\\[^\\n]))",
          "captures": {
            "1": {
              "name": "invalid.illegal._.invalid.mcfunction"
            },
            "2": {
              "name": "markup.underline._.underline.mcfunction"
            }
          }
        },
        {
          "match": "((\\\\))",
          "captures": {
            "1": {
              "name": "invalid.illegal._.invalid.mcfunction"
            },
            "2": {
              "name": "markup.underline._.underline.mcfunction"
            }
          }
        }
      ]
    },
    "error.list": {
      "patterns": [
        {
          "begin": "((\\[))",
          "end": "((?=\\n)|(\\]))",
          "patterns": [
            {
              "include": "#error.block"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "invalid.illegal._.invalid.mcfunction"
            },
            "2": {
              "name": "markup.underline._.underline.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "invalid.illegal._.invalid.mcfunction"
            },
            "2": {
              "name": "markup.underline._.underline.mcfunction"
            }
          }
        }
      ]
    },
    "error.list_value": {
      "patterns": [
        {
          "include": "#error.block_value"
        },
        {
          "match": "(([^\\n\\]\\,]))",
          "captures": {
            "1": {
              "name": "invalid.illegal._.invalid.mcfunction"
            },
            "2": {
              "name": "markup.underline._.underline.mcfunction"
            }
          }
        }
      ]
    },
    "error.quoted_string": {
      "patterns": [
        {
          "include": "#error.double_quoted_string"
        },
        {
          "include": "#error.single_quoted_string"
        }
      ]
    },
    "error.single_quoted_string": {
      "patterns": [
        {
          "begin": "((\\'))",
          "end": "((?=\\n)|(\\'))",
          "patterns": [
            {
              "include": "#error.single_quoted_string.content"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "invalid.illegal._.invalid.mcfunction"
            },
            "2": {
              "name": "markup.underline._.underline.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "invalid.illegal._.invalid.mcfunction"
            },
            "2": {
              "name": "markup.underline._.underline.mcfunction"
            }
          }
        }
      ]
    },
    "error.single_quoted_string.content": {
      "patterns": [
        {
          "match": "(([^\\\\\\'\\n]))",
          "captures": {
            "1": {
              "name": "invalid.illegal._.invalid.mcfunction"
            },
            "2": {
              "name": "markup.underline._.underline.mcfunction"
            }
          }
        },
        {
          "match": "((\\\\[^\\n]))",
          "captures": {
            "1": {
              "name": "invalid.illegal._.invalid.mcfunction"
            },
            "2": {
              "name": "markup.underline._.underline.mcfunction"
            }
          }
        },
        {
          "match": "((\\\\))",
          "captures": {
            "1": {
              "name": "invalid.illegal._.invalid.mcfunction"
            },
            "2": {
              "name": "markup.underline._.underline.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.advancement": {
      "begin": "(advancement) (?=[^\\s\\#])",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.advancement"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.control._.command.mcfunction"
        }
      }
    },
    "generated.command.advancement.grant": {
      "begin": "(grant) (?=[^\\s\\#])",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.advancement.grant"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.advancement.grant.targets": {
      "begin": "(targets) (?=[^\\s\\#])",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.advancement.grant.targets"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.advancement.grant.targets.everything": {
      "begin": "(everything)( |(?=\\n))",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.advancement.grant.targets.everything"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.advancement.grant.targets.from": {
      "begin": "(from) (?=[^\\s\\#])",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.advancement.grant.targets.from"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.advancement.grant.targets.from.advancement": {
      "begin": "(advancement)( |(?=\\n))",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.advancement.grant.targets.from.advancement"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.advancement.grant.targets.only": {
      "begin": "(only) (?=[^\\s\\#])",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.advancement.grant.targets.only"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.advancement.grant.targets.only.advancement": {
      "begin": "(advancement)( |(?=\\n))",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.advancement.grant.targets.only.advancement"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.advancement.grant.targets.only.advancement.criterion": {
      "begin": "(criterion)( |(?=\\n))",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.advancement.grant.targets.only.advancement.criterion"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.advancement.grant.targets.through": {
      "begin": "(through) (?=[^\\s\\#])",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.advancement.grant.targets.through"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.advancement.grant.targets.through.advancement": {
      "begin": "(advancement)( |(?=\\n))",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.advancement.grant.targets.through.advancement"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.advancement.grant.targets.until": {
      "begin": "(until) (?=[^\\s\\#])",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.advancement.grant.targets.until"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.advancement.grant.targets.until.advancement": {
      "begin": "(advancement)( |(?=\\n))",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.advancement.grant.targets.until.advancement"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.advancement.revoke": {
      "begin": "(revoke) (?=[^\\s\\#])",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.advancement.revoke"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.advancement.revoke.targets": {
      "begin": "(targets) (?=[^\\s\\#])",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.advancement.revoke.targets"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.advancement.revoke.targets.everything": {
      "begin": "(everything)( |(?=\\n))",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.advancement.revoke.targets.everything"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.advancement.revoke.targets.from": {
      "begin": "(from) (?=[^\\s\\#])",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.advancement.revoke.targets.from"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.advancement.revoke.targets.from.advancement": {
      "begin": "(advancement)( |(?=\\n))",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.advancement.revoke.targets.from.advancement"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.advancement.revoke.targets.only": {
      "begin": "(only) (?=[^\\s\\#])",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.advancement.revoke.targets.only"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.advancement.revoke.targets.only.advancement": {
      "begin": "(advancement)( |(?=\\n))",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.advancement.revoke.targets.only.advancement"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.advancement.revoke.targets.only.advancement.criterion": {
      "begin": "(criterion)( |(?=\\n))",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.advancement.revoke.targets.only.advancement.criterion"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.advancement.revoke.targets.through": {
      "begin": "(through) (?=[^\\s\\#])",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.advancement.revoke.targets.through"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.advancement.revoke.targets.through.advancement": {
      "begin": "(advancement)( |(?=\\n))",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.advancement.revoke.targets.through.advancement"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.advancement.revoke.targets.until": {
      "begin": "(until) (?=[^\\s\\#])",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.advancement.revoke.targets.until"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.advancement.revoke.targets.until.advancement": {
      "begin": "(advancement)( |(?=\\n))",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.advancement.revoke.targets.until.advancement"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute": {
      "begin": "(execute) (?=[^\\s\\#])",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.control._.command.mcfunction"
        }
      }
    },
    "generated.command.execute.as": {
      "begin": "(as) (?=[^\\s\\#])",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.as"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.as.targets": {
      "patterns": [
        {
          "begin": "(\\@[parse])( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.as.targets"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            }
          }
        },
        {
          "begin": "([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4})( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.as.targets"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.uuid.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\w+)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.as.targets"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.player_name.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\@[parse])(\\[)(?= *[\\w\\]])",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\])( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.execute.as.targets"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "support.class._.bracket.target_selector.mcfunction"
                }
              }
            },
            {
              "include": "#target_selector.content"
            },
            {
              "include": "#error.command_line"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.bracket.target_selector.mcfunction"
            }
          }
        },
        {
          "include": "#error.command_line"
        }
      ]
    },
    "generated.command.execute.run": {
      "begin": "(run)( |(?=\\n))",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.run"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.say": {
      "begin": "(say) (?=[^\\s\\#])",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.say"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.control._.command.mcfunction"
        }
      }
    },
    "generated.command.say.message": {
      "patterns": [
        {
          "include": "#common.message"
        }
      ]
    },
    "generated.command.tellraw": {
      "begin": "(tellraw) (?=[^\\s\\#])",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.tellraw"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.control._.command.mcfunction"
        }
      }
    },
    "generated.command.tellraw.targets": {
      "patterns": [
        {
          "begin": "(\\@[parse]) (?=[^\\s\\#])",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.tellraw.targets"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            }
          }
        },
        {
          "begin": "([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4}) (?=[^\\s\\#])",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.tellraw.targets"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.uuid.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\w+) (?=[^\\s\\#])",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.tellraw.targets"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.player_name.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\@[parse])(\\[)(?= *[\\w\\]])",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\]) (?=[^\\s\\#])",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.tellraw.targets"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "support.class._.bracket.target_selector.mcfunction"
                }
              }
            },
            {
              "include": "#target_selector.content"
            },
            {
              "include": "#error.command_line"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.bracket.target_selector.mcfunction"
            }
          }
        },
        {
          "include": "#error.command_line"
        }
      ]
    },
    "generated.commands": {
      "patterns": [
        {
          "include": "#generated.command.say"
        },
        {
          "include": "#generated.command.tellraw"
        },
        {
          "include": "#generated.command.execute"
        },
        {
          "include": "#generated.command.advancement"
        },
        {
          "include": "#error.command_line"
        }
      ]
    },
    "generated.commands.advancement": {
      "patterns": [
        {
          "include": "#generated.command.advancement.grant"
        },
        {
          "include": "#generated.command.advancement.revoke"
        },
        {
          "include": "#error.command_line"
        }
      ]
    },
    "generated.commands.advancement.grant": {
      "patterns": [
        {
          "include": "#generated.command.advancement.grant.targets"
        },
        {
          "include": "#error.command_line"
        }
      ]
    },
    "generated.commands.advancement.grant.targets": {
      "patterns": [
        {
          "include": "#generated.command.advancement.grant.targets.everything"
        },
        {
          "include": "#generated.command.advancement.grant.targets.from"
        },
        {
          "include": "#generated.command.advancement.grant.targets.only"
        },
        {
          "include": "#generated.command.advancement.grant.targets.through"
        },
        {
          "include": "#generated.command.advancement.grant.targets.until"
        },
        {
          "include": "#error.command_line"
        }
      ]
    },
    "generated.commands.advancement.grant.targets.everything": {
      "patterns": [
        {
          "include": "#error.command_line"
        }
      ]
    },
    "generated.commands.advancement.grant.targets.from": {
      "patterns": [
        {
          "include": "#generated.command.advancement.grant.targets.from.advancement"
        },
        {
          "include": "#error.command_line"
        }
      ]
    },
    "generated.commands.advancement.grant.targets.from.advancement": {
      "patterns": [
        {
          "include": "#error.command_line"
        }
      ]
    },
    "generated.commands.advancement.grant.targets.only": {
      "patterns": [
        {
          "include": "#generated.command.advancement.grant.targets.only.advancement"
        },
        {
          "include": "#error.command_line"
        }
      ]
    },
    "generated.commands.advancement.grant.targets.only.advancement": {
      "patterns": [
        {
          "include": "#generated.command.advancement.grant.targets.only.advancement.criterion"
        },
        {
          "include": "#error.command_line"
        }
      ]
    },
    "generated.commands.advancement.grant.targets.only.advancement.criterion": {
      "patterns": [
        {
          "include": "#error.command_line"
        }
      ]
    },
    "generated.commands.advancement.grant.targets.through": {
      "patterns": [
        {
          "include": "#generated.command.advancement.grant.targets.through.advancement"
        },
        {
          "include": "#error.command_line"
        }
      ]
    },
    "generated.commands.advancement.grant.targets.through.advancement": {
      "patterns": [
        {
          "include": "#error.command_line"
        }
      ]
    },
    "generated.commands.advancement.grant.targets.until": {
      "patterns": [
        {
          "include": "#generated.command.advancement.grant.targets.until.advancement"
        },
        {
          "include": "#error.command_line"
        }
      ]
    },
    "generated.commands.advancement.grant.targets.until.advancement": {
      "patterns": [
        {
          "include": "#error.command_line"
        }
      ]
    },
    "generated.commands.advancement.revoke": {
      "patterns": [
        {
          "include": "#generated.command.advancement.revoke.targets"
        },
        {
          "include": "#error.command_line"
        }
      ]
    },
    "generated.commands.advancement.revoke.targets": {
      "patterns": [
        {
          "include": "#generated.command.advancement.revoke.targets.everything"
        },
        {
          "include": "#generated.command.advancement.revoke.targets.from"
        },
        {
          "include": "#generated.command.advancement.revoke.targets.only"
        },
        {
          "include": "#generated.command.advancement.revoke.targets.through"
        },
        {
          "include": "#generated.command.advancement.revoke.targets.until"
        },
        {
          "include": "#error.command_line"
        }
      ]
    },
    "generated.commands.advancement.revoke.targets.everything": {
      "patterns": [
        {
          "include": "#error.command_line"
        }
      ]
    },
    "generated.commands.advancement.revoke.targets.from": {
      "patterns": [
        {
          "include": "#generated.command.advancement.revoke.targets.from.advancement"
        },
        {
          "include": "#error.command_line"
        }
      ]
    },
    "generated.commands.advancement.revoke.targets.from.advancement": {
      "patterns": [
        {
          "include": "#error.command_line"
        }
      ]
    },
    "generated.commands.advancement.revoke.targets.only": {
      "patterns": [
        {
          "include": "#generated.command.advancement.revoke.targets.only.advancement"
        },
        {
          "include": "#error.command_line"
        }
      ]
    },
    "generated.commands.advancement.revoke.targets.only.advancement": {
      "patterns": [
        {
          "include": "#generated.command.advancement.revoke.targets.only.advancement.criterion"
        },
        {
          "include": "#error.command_line"
        }
      ]
    },
    "generated.commands.advancement.revoke.targets.only.advancement.criterion": {
      "patterns": [
        {
          "include": "#error.command_line"
        }
      ]
    },
    "generated.commands.advancement.revoke.targets.through": {
      "patterns": [
        {
          "include": "#generated.command.advancement.revoke.targets.through.advancement"
        },
        {
          "include": "#error.command_line"
        }
      ]
    },
    "generated.commands.advancement.revoke.targets.through.advancement": {
      "patterns": [
        {
          "include": "#error.command_line"
        }
      ]
    },
    "generated.commands.advancement.revoke.targets.until": {
      "patterns": [
        {
          "include": "#generated.command.advancement.revoke.targets.until.advancement"
        },
        {
          "include": "#error.command_line"
        }
      ]
    },
    "generated.commands.advancement.revoke.targets.until.advancement": {
      "patterns": [
        {
          "include": "#error.command_line"
        }
      ]
    },
    "generated.commands.execute": {
      "patterns": [
        {
          "include": "#generated.command.execute.run"
        },
        {
          "include": "#generated.command.execute.as"
        },
        {
          "include": "#error.command_line"
        }
      ]
    },
    "generated.commands.execute.as": {
      "patterns": [
        {
          "include": "#generated.command.execute.as.targets"
        },
        {
          "include": "#error.command_line"
        }
      ]
    },
    "generated.commands.execute.as.targets": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        }
      ]
    },
    "generated.commands.execute.run": {
      "patterns": [
        {
          "include": "#generated.commands"
        }
      ]
    },
    "generated.commands.say": {
      "patterns": [
        {
          "include": "#generated.command.say.message"
        },
        {
          "include": "#error.command_line"
        }
      ]
    },
    "generated.commands.tellraw": {
      "patterns": [
        {
          "include": "#generated.command.tellraw.targets"
        },
        {
          "include": "#error.command_line"
        }
      ]
    },
    "generated.commands.tellraw.targets": {
      "patterns": [
        {
          "include": "#text_component"
        },
        {
          "include": "#error.command_line"
        }
      ]
    },
    "nbt.compound": {
      "patterns": [
        {
          "begin": "(\\{)",
          "end": "(?=\\n)|(\\})",
          "patterns": [
            {
              "include": "#nbt.compound.content"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "storage._.bracket.dict.generic.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "storage._.bracket.dict.generic.mcfunction"
            }
          }
        }
      ]
    },
    "nbt.compound.content": {
      "patterns": [
        {
          "include": "#common.block"
        }
      ]
    },
    "nbt_path": {
      "patterns": [
        {
          "include": "#common.double_quoted_string.content"
        }
      ]
    },
    "score_map.content": {
      "patterns": [
        {
          "include": "#common.block"
        }
      ]
    },
    "target_selector.arguments": {
      "patterns": [
        {
          "include": "#target_selector.content.argument.xyz"
        },
        {
          "include": "#target_selector.content.argument.dxyz"
        },
        {
          "include": "#target_selector.content.argument.xy_rotation"
        },
        {
          "include": "#target_selector.content.argument.distance"
        },
        {
          "include": "#target_selector.content.argument.team"
        },
        {
          "include": "#target_selector.content.argument.tag"
        },
        {
          "include": "#target_selector.content.argument.name"
        },
        {
          "include": "#target_selector.content.argument.type"
        },
        {
          "include": "#target_selector.content.argument.level"
        },
        {
          "include": "#target_selector.content.argument.gamemode"
        },
        {
          "include": "#target_selector.content.argument.sort"
        },
        {
          "include": "#target_selector.content.argument.limit"
        },
        {
          "include": "#target_selector.content.argument.scores"
        },
        {
          "include": "#target_selector.content.argument.advancements"
        },
        {
          "include": "#target_selector.content.argument.nbt"
        }
      ]
    },
    "target_selector.content": {
      "patterns": [
        {
          "name": "meta._.argument_separator.content.target_selector.mcfunction",
          "match": "(?\u003c=[^\\[\\,])(\\,)(?= *\\w)",
          "captures": {
            "1": {
              "name": "support.class._.comma.target_selector.mcfunction"
            }
          }
        },
        {
          "match": "(?\u003c=[\\[\\,]) +(?=\\w)"
        },
        {
          "match": "(?\u003c=[^\\[\\,]) +(?=[\\]\\,])"
        },
        {
          "match": "(?\u003c=\\[) +(?=\\])"
        },
        {
          "include": "#target_selector.arguments"
        }
      ]
    },
    "target_selector.content.argument.advancements": {
      "patterns": [
        {
          "name": "meta._.advancements.argument.content.target_selector.mcfunction",
          "begin": "(advancements) *(\\=) *(\\{)",
          "end": "(?=\\n)|(\\}) *(?=[\\]\\,])",
          "patterns": [
            {
              "include": "#advancement_map.content"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.other._.param.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.equals.target_selector.mcfunction"
            },
            "3": {
              "name": "storage._.bracket.advancement_map.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "storage._.bracket.advancement_map.mcfunction"
            }
          }
        }
      ]
    },
    "target_selector.content.argument.distance": {
      "patterns": [
        {
          "name": "meta._.distance.argument.content.target_selector.mcfunction",
          "begin": "(distance) *(\\=) *(?=[^\\n\\]\\,])",
          "end": "(?=\\n)| *(?=[\\]\\,])",
          "patterns": [
            {
              "include": "#common.double_range"
            },
            {
              "include": "#error.command_line"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.other._.param.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.equals.target_selector.mcfunction"
            }
          }
        }
      ]
    },
    "target_selector.content.argument.dxyz": {
      "patterns": [
        {
          "name": "meta._.dxyz.argument.content.target_selector.mcfunction",
          "match": "(dx|dy|dz) *(\\=) *(\\-?\\d*\\.?\\d+) *(?=[\\]\\,])",
          "captures": {
            "1": {
              "name": "keyword.other._.param.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.equals.target_selector.mcfunction"
            },
            "3": {
              "name": "constant.numeric._.number.mcfunction"
            }
          }
        }
      ]
    },
    "target_selector.content.argument.gamemode": {
      "patterns": [
        {
          "name": "meta._.gamemode.argument.content.target_selector.mcfunction",
          "match": "(gamemode) *(\\=) *(\\!?) *(survival|creative|adventure|spectator) *(?=[\\]\\,])",
          "captures": {
            "1": {
              "name": "keyword.other._.param.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.equals.target_selector.mcfunction"
            },
            "3": {
              "name": "constant.character.escape._.not.target_selector.mcfunction"
            },
            "4": {
              "name": "keyword._.keyword.mcfunction"
            }
          }
        }
      ]
    },
    "target_selector.content.argument.level": {
      "patterns": [
        {
          "name": "meta._.level.argument.content.target_selector.mcfunction",
          "begin": "(level) *(\\=) *(?=[^\\n\\]\\,])",
          "end": "(?=\\n)| *(?=[\\]\\,])",
          "patterns": [
            {
              "include": "#common.integer_range"
            },
            {
              "include": "#error.command_line"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.other._.param.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.equals.target_selector.mcfunction"
            }
          }
        }
      ]
    },
    "target_selector.content.argument.limit": {
      "patterns": [
        {
          "name": "meta._.limit.argument.content.target_selector.mcfunction",
          "match": "(limit) *(\\=) *(0*[1-9]\\d*) *(?=[\\]\\,])",
          "captures": {
            "1": {
              "name": "keyword.other._.param.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.equals.target_selector.mcfunction"
            },
            "3": {
              "name": "constant.numeric._.number.mcfunction"
            }
          }
        }
      ]
    },
    "target_selector.content.argument.name": {
      "patterns": [
        {
          "name": "meta._.name.argument.content.target_selector.mcfunction",
          "begin": "(name) *(\\=) *(\\!?) *",
          "end": "(?=\\n)| *(?=[\\]\\,])",
          "patterns": [
            {
              "include": "#common.quotable_string"
            },
            {
              "include": "#error.command_line"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.other._.param.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.equals.target_selector.mcfunction"
            },
            "3": {
              "name": "constant.character.escape._.not.target_selector.mcfunction"
            }
          }
        }
      ]
    },
    "target_selector.content.argument.nbt": {
      "patterns": [
        {
          "name": "meta._.nbt.argument.content.target_selector.mcfunction",
          "begin": "(nbt) *(\\=) *(\\!?) *(\\{)",
          "end": "(?=\\n)|(\\}) *(?=[\\]\\,])",
          "patterns": [
            {
              "include": "#nbt.compound.content"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.other._.param.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.equals.target_selector.mcfunction"
            },
            "3": {
              "name": "constant.character.escape._.not.target_selector.mcfunction"
            },
            "4": {
              "name": "storage._.compound_bracket.nbt.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "storage._.compound_bracket.nbt.mcfunction"
            }
          }
        }
      ]
    },
    "target_selector.content.argument.scores": {
      "patterns": [
        {
          "name": "meta._.scores.argument.content.target_selector.mcfunction",
          "begin": "(scores) *(\\=) *(\\{)",
          "end": "(?=\\n)|(\\}) *(?=[\\]\\,])",
          "patterns": [
            {
              "include": "#score_map.content"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.other._.param.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.equals.target_selector.mcfunction"
            },
            "3": {
              "name": "storage._.bracket.score_map.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "storage._.bracket.score_map.mcfunction"
            }
          }
        }
      ]
    },
    "target_selector.content.argument.sort": {
      "patterns": [
        {
          "name": "meta._.sort.argument.content.target_selector.mcfunction",
          "match": "(sort) *(\\=) *(arbitrary|furthest|nearest|random) *(?=[\\]\\,])",
          "captures": {
            "1": {
              "name": "keyword.other._.param.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.equals.target_selector.mcfunction"
            },
            "3": {
              "name": "keyword._.keyword.mcfunction"
            }
          }
        }
      ]
    },
    "target_selector.content.argument.tag": {
      "patterns": [
        {
          "name": "meta._.tag.argument.content.target_selector.mcfunction",
          "match": "(tag) *(\\=) *(\\!?) *([\\w\\.\\-\\+]+)? *(?=[\\]\\,])",
          "captures": {
            "1": {
              "name": "keyword.other._.param.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.equals.target_selector.mcfunction"
            },
            "3": {
              "name": "constant.character.escape._.not.target_selector.mcfunction"
            },
            "4": {
              "name": "entity.other.attribute-name._.entity_tag.mcfunction"
            }
          }
        }
      ]
    },
    "target_selector.content.argument.team": {
      "patterns": [
        {
          "name": "meta._.team.argument.content.target_selector.mcfunction",
          "match": "(team) *(\\=) *(\\!?) *([\\w\\.\\-\\+]+)? *(?=[\\]\\,])",
          "captures": {
            "1": {
              "name": "keyword.other._.param.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.equals.target_selector.mcfunction"
            },
            "3": {
              "name": "constant.character.escape._.not.target_selector.mcfunction"
            },
            "4": {
              "name": "entity.other.attribute-name._.scoreboard_team.mcfunction"
            }
          }
        }
      ]
    },
    "target_selector.content.argument.type": {
      "patterns": [
        {
          "name": "meta._.type.argument.content.target_selector.mcfunction",
          "begin": "(type) *(\\=) *(\\!?) *(?=[^\\n\\]\\,])",
          "end": "(?=\\n)| *(?=[\\]\\,])",
          "patterns": [
            {
              "include": "#common.taggable_resource_location"
            },
            {
              "include": "#error.command_line"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.other._.param.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.equals.target_selector.mcfunction"
            },
            "3": {
              "name": "constant.character.escape._.not.target_selector.mcfunction"
            }
          }
        }
      ]
    },
    "target_selector.content.argument.xy_rotation": {
      "patterns": [
        {
          "name": "meta._.xy_rotation.argument.content.target_selector.mcfunction",
          "begin": "(x_rotation|y_rotation) *(\\=) *(?=[^\\n\\]\\,])",
          "end": "(?=\\n)| *(?=[\\]\\,])",
          "patterns": [
            {
              "include": "#common.double_range"
            },
            {
              "include": "#error.command_line"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.other._.param.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.equals.target_selector.mcfunction"
            }
          }
        }
      ]
    },
    "target_selector.content.argument.xyz": {
      "patterns": [
        {
          "name": "meta._.xyz.argument.content.target_selector.mcfunction",
          "match": "(x|y|z) *(\\=) *(\\-?\\d*\\.?\\d+) *(?=[\\]\\,])",
          "captures": {
            "1": {
              "name": "keyword.other._.param.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.equals.target_selector.mcfunction"
            },
            "3": {
              "name": "constant.numeric._.number.mcfunction"
            }
          }
        }
      ]
    },
    "text_component": {
      "patterns": [
        {
          "include": "#text_component.boolean"
        },
        {
          "include": "#text_component.number"
        },
        {
          "include": "#text_component.string"
        },
        {
          "include": "#text_component.list"
        },
        {
          "include": "#text_component.dict"
        }
      ]
    },
    "text_component.atomic": {
      "patterns": [
        {
          "include": "#text_component.boolean"
        },
        {
          "include": "#text_component.number"
        },
        {
          "include": "#text_component.string"
        }
      ]
    },
    "text_component.boolean": {
      "patterns": [
        {
          "include": "#common.boolean"
        }
      ]
    },
    "text_component.command_string": {
      "patterns": [
        {
          "begin": "(\\\")(\\/)",
          "end": "(?=\\n)|(\\\")",
          "patterns": [
            {
              "include": "#commands"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            },
            "2": {
              "name": "keyword.control._.command.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.dict": {
      "patterns": [
        {
          "begin": "(\\{)",
          "end": "(?=\\n)|(\\})",
          "patterns": [
            {
              "include": "#text_component.dict_common"
            },
            {
              "include": "#text_component.properties"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "storage._.bracket.text_component.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "storage._.bracket.text_component.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.dict.click_event": {
      "patterns": [
        {
          "begin": "(\\{)",
          "end": "(?=\\n)|(\\})",
          "patterns": [
            {
              "include": "#text_component.dict_common"
            },
            {
              "include": "#text_component.properties.click_event"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "storage._.bracket.text_component.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "storage._.bracket.text_component.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.dict.hover_event": {
      "patterns": [
        {
          "begin": "(\\{)",
          "end": "(?=\\n)|(\\})",
          "patterns": [
            {
              "include": "#text_component.dict_common"
            },
            {
              "include": "#text_component.properties.hover_event"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "storage._.bracket.text_component.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "storage._.bracket.text_component.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.dict.score": {
      "patterns": [
        {
          "begin": "(\\{)",
          "end": "(?=\\n)|(\\})",
          "patterns": [
            {
              "include": "#text_component.dict_common"
            },
            {
              "include": "#text_component.properties.score"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "storage._.bracket.text_component.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "storage._.bracket.text_component.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.dict_common": {
      "patterns": [
        {
          "match": "(?\u003c=[^\\{\\,])(\\,)(?=[^\\}\\,])",
          "captures": {
            "1": {
              "name": "storage._.comma.text_component.mcfunction"
            }
          }
        },
        {
          "include": "#common.dict.whitespace"
        }
      ]
    },
    "text_component.list": {
      "patterns": [
        {
          "begin": "(\\[)",
          "end": "(?=\\n)|(\\])",
          "patterns": [
            {
              "include": "#text_component.list_common"
            },
            {
              "include": "#text_component.list_values"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "storage._.bracket.text_component.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "storage._.bracket.text_component.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.list_common": {
      "patterns": [
        {
          "match": "(?\u003c=[^\\[\\,])(\\,)(?=[^\\]\\,])",
          "captures": {
            "1": {
              "name": "storage._.comma.text_component.mcfunction"
            }
          }
        },
        {
          "include": "#common.list.whitespace"
        }
      ]
    },
    "text_component.list_values": {
      "patterns": [
        {
          "include": "#text_component"
        },
        {
          "include": "#error.list_value"
        }
      ]
    },
    "text_component.nbt_compound_string": {
      "patterns": [
        {
          "begin": "(\\\")(?=\\{)",
          "end": "(?=\\n)|(\\\")",
          "patterns": [
            {
              "include": "#nbt.compound"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.number": {
      "patterns": [
        {
          "include": "#common.number"
        }
      ]
    },
    "text_component.properties": {
      "patterns": [
        {
          "include": "#text_component.property.b_i_u_s_o"
        },
        {
          "include": "#text_component.property.color"
        },
        {
          "include": "#text_component.property.text_translate"
        },
        {
          "include": "#text_component.property.extra_with"
        },
        {
          "include": "#text_component.property.selector"
        },
        {
          "include": "#text_component.property.score"
        },
        {
          "include": "#text_component.property.keybind"
        },
        {
          "include": "#text_component.property.insertion"
        },
        {
          "include": "#text_component.property.click_event"
        },
        {
          "include": "#text_component.property.hover_event"
        },
        {
          "include": "#text_component.property.nbt"
        },
        {
          "include": "#text_component.property.entity"
        },
        {
          "include": "#text_component.property.block"
        },
        {
          "include": "#text_component.property.interpret"
        },
        {
          "include": "#error.compound_value"
        }
      ]
    },
    "text_component.properties.click_event": {
      "patterns": [
        {
          "include": "#text_component.property.click_event.action"
        },
        {
          "include": "#text_component.property.click_event.value"
        },
        {
          "include": "#error.compound_value"
        }
      ]
    },
    "text_component.properties.hover_event": {
      "patterns": [
        {
          "include": "#text_component.property.hover_event.action"
        },
        {
          "include": "#text_component.property.hover_event.value"
        },
        {
          "include": "#error.compound_value"
        }
      ]
    },
    "text_component.properties.score": {
      "patterns": [
        {
          "include": "#text_component.property.score.name"
        },
        {
          "include": "#text_component.property.score.objective"
        },
        {
          "include": "#text_component.property.score.value"
        },
        {
          "include": "#error.compound_value"
        }
      ]
    },
    "text_component.property.b_i_u_s_o": {
      "patterns": [
        {
          "begin": "(\\\")(bold|italic|underlined|strikethrough|obfuscated)(\\\") *(\\:) *(?=[^\\s\\,\\}])",
          "end": "(?=\\n)|(?= *[\\,\\}])",
          "patterns": [
            {
              "include": "#text_component.boolean"
            },
            {
              "include": "#error.compound_value"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            },
            "2": {
              "name": "string._.property.text_component.mcfunction"
            },
            "3": {
              "name": "string._.string.mcfunction"
            },
            "4": {
              "name": "storage._.compound_colon.nbt.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.property.block": {
      "patterns": [
        {
          "begin": "(\\\")(block)(\\\") *(\\:) *(?=[^\\s\\,\\}])",
          "end": "(?=\\n)|(?= *[\\,\\}])",
          "patterns": [
            {
              "include": "#text_component.string.position"
            },
            {
              "include": "#error.compound_value"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            },
            "2": {
              "name": "string._.property.text_component.mcfunction"
            },
            "3": {
              "name": "string._.string.mcfunction"
            },
            "4": {
              "name": "storage._.compound_colon.nbt.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.property.click_event": {
      "patterns": [
        {
          "begin": "(\\\")(clickEvent)(\\\") *(\\:) *(?=[^\\s\\,\\}])",
          "end": "(?=\\n)|(?= *[\\,\\}])",
          "patterns": [
            {
              "include": "#text_component.dict.click_event"
            },
            {
              "include": "#error.compound_value"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            },
            "2": {
              "name": "string._.property.text_component.mcfunction"
            },
            "3": {
              "name": "string._.string.mcfunction"
            },
            "4": {
              "name": "storage._.compound_colon.nbt.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.property.click_event.action": {
      "patterns": [
        {
          "begin": "(\\\")(action)(\\\") *(\\:) *(?=[^\\s\\,\\}])",
          "end": "(?=\\n)|(?= *[\\,\\}])",
          "patterns": [
            {
              "include": "#text_component.string.click_event"
            },
            {
              "include": "#error.compound_value"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            },
            "2": {
              "name": "string._.property.text_component.mcfunction"
            },
            "3": {
              "name": "string._.string.mcfunction"
            },
            "4": {
              "name": "storage._.compound_colon.nbt.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.property.click_event.value": {
      "patterns": [
        {
          "begin": "(\\\")(value)(\\\") *(\\:) *(?=[^\\s\\,\\}])",
          "end": "(?=\\n)|(?= *[\\,\\}])",
          "patterns": [
            {
              "include": "#text_component.command_string"
            },
            {
              "include": "#text_component.string"
            },
            {
              "include": "#error.compound_value"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            },
            "2": {
              "name": "string._.property.text_component.mcfunction"
            },
            "3": {
              "name": "string._.string.mcfunction"
            },
            "4": {
              "name": "storage._.compound_colon.nbt.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.property.color": {
      "patterns": [
        {
          "begin": "(\\\")(color)(\\\") *(\\:) *(?=[^\\s\\,\\}])",
          "end": "(?=\\n)|(?= *[\\,\\}])",
          "patterns": [
            {
              "include": "#text_component.string.color"
            },
            {
              "include": "#error.compound_value"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            },
            "2": {
              "name": "string._.property.text_component.mcfunction"
            },
            "3": {
              "name": "string._.string.mcfunction"
            },
            "4": {
              "name": "storage._.compound_colon.nbt.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.property.entity": {
      "patterns": [
        {
          "begin": "(\\\")(entity)(\\\") *(\\:) *(?=[^\\s\\,\\}])",
          "end": "(?=\\n)|(?= *[\\,\\}])",
          "patterns": [
            {
              "include": "#text_component.string.target"
            },
            {
              "include": "#error.compound_value"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            },
            "2": {
              "name": "string._.property.text_component.mcfunction"
            },
            "3": {
              "name": "string._.string.mcfunction"
            },
            "4": {
              "name": "storage._.compound_colon.nbt.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.property.extra_with": {
      "patterns": [
        {
          "begin": "(\\\")(extra|with)(\\\") *(\\:) *(?=[^\\s\\,\\}])",
          "end": "(?=\\n)|(?= *[\\,\\}])",
          "patterns": [
            {
              "include": "#text_component.list"
            },
            {
              "include": "#error.compound_value"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            },
            "2": {
              "name": "string._.property.text_component.mcfunction"
            },
            "3": {
              "name": "string._.string.mcfunction"
            },
            "4": {
              "name": "storage._.compound_colon.nbt.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.property.hover_event": {
      "patterns": [
        {
          "begin": "(\\\")(hoverEvent)(\\\") *(\\:) *(?=[^\\s\\,\\}])",
          "end": "(?=\\n)|(?= *[\\,\\}])",
          "patterns": [
            {
              "include": "#text_component.dict.hover_event"
            },
            {
              "include": "#error.compound_value"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            },
            "2": {
              "name": "string._.property.text_component.mcfunction"
            },
            "3": {
              "name": "string._.string.mcfunction"
            },
            "4": {
              "name": "storage._.compound_colon.nbt.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.property.hover_event.action": {
      "patterns": [
        {
          "begin": "(\\\")(action)(\\\") *(\\:) *(?=[^\\s\\,\\}])",
          "end": "(?=\\n)|(?= *[\\,\\}])",
          "patterns": [
            {
              "include": "#text_component.string.hover_event"
            },
            {
              "include": "#error.compound_value"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            },
            "2": {
              "name": "string._.property.text_component.mcfunction"
            },
            "3": {
              "name": "string._.string.mcfunction"
            },
            "4": {
              "name": "storage._.compound_colon.nbt.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.property.hover_event.value": {
      "patterns": [
        {
          "begin": "(\\\")(value)(\\\") *(\\:) *(?=[^\\s\\,\\}])",
          "end": "(?=\\n)|(?= *[\\,\\}])",
          "patterns": [
            {
              "include": "#text_component.nbt_compound_string"
            },
            {
              "include": "#text_component"
            },
            {
              "include": "#error.compound_value"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            },
            "2": {
              "name": "string._.property.text_component.mcfunction"
            },
            "3": {
              "name": "string._.string.mcfunction"
            },
            "4": {
              "name": "storage._.compound_colon.nbt.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.property.insertion": {
      "patterns": [
        {
          "begin": "(\\\")(insertion)(\\\") *(\\:) *(?=[^\\s\\,\\}])",
          "end": "(?=\\n)|(?= *[\\,\\}])",
          "patterns": [
            {
              "include": "#text_component.command_string"
            },
            {
              "include": "#text_component.string"
            },
            {
              "include": "#error.compound_value"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            },
            "2": {
              "name": "string._.property.text_component.mcfunction"
            },
            "3": {
              "name": "string._.string.mcfunction"
            },
            "4": {
              "name": "storage._.compound_colon.nbt.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.property.interpret": {
      "patterns": [
        {
          "begin": "(\\\")(interpret)(\\\") *(\\:) *(?=[^\\s\\,\\}])",
          "end": "(?=\\n)|(?= *[\\,\\}])",
          "patterns": [
            {
              "include": "#text_component.boolean"
            },
            {
              "include": "#error.compound_value"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            },
            "2": {
              "name": "string._.property.text_component.mcfunction"
            },
            "3": {
              "name": "string._.string.mcfunction"
            },
            "4": {
              "name": "storage._.compound_colon.nbt.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.property.keybind": {
      "patterns": [
        {
          "begin": "(\\\")(keybind)(\\\") *(\\:) *(?=[^\\s\\,\\}])",
          "end": "(?=\\n)|(?= *[\\,\\}])",
          "patterns": [
            {
              "include": "#text_component.string.keybind"
            },
            {
              "include": "#error.compound_value"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            },
            "2": {
              "name": "string._.property.text_component.mcfunction"
            },
            "3": {
              "name": "string._.string.mcfunction"
            },
            "4": {
              "name": "storage._.compound_colon.nbt.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.property.nbt": {
      "patterns": [
        {
          "begin": "(\\\")(nbt)(\\\") *(\\:) *(?=[^\\s\\,\\}])",
          "end": "(?=\\n)|(?= *[\\,\\}])",
          "patterns": [
            {
              "include": "#text_component.string.nbt"
            },
            {
              "include": "#error.compound_value"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            },
            "2": {
              "name": "string._.property.text_component.mcfunction"
            },
            "3": {
              "name": "string._.string.mcfunction"
            },
            "4": {
              "name": "storage._.compound_colon.nbt.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.property.score": {
      "patterns": [
        {
          "begin": "(\\\")(score)(\\\") *(\\:) *(?=[^\\s\\,\\}])",
          "end": "(?=\\n)|(?= *[\\,\\}])",
          "patterns": [
            {
              "include": "#text_component.dict.score"
            },
            {
              "include": "#error.compound_value"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            },
            "2": {
              "name": "string._.property.text_component.mcfunction"
            },
            "3": {
              "name": "string._.string.mcfunction"
            },
            "4": {
              "name": "storage._.compound_colon.nbt.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.property.score.name": {
      "patterns": [
        {
          "begin": "(\\\")(name)(\\\") *(\\:) *(?=[^\\s\\,\\}])",
          "end": "(?=\\n)|(?= *[\\,\\}])",
          "patterns": [
            {
              "include": "#text_component.string.score_holder"
            },
            {
              "include": "#error.compound_value"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            },
            "2": {
              "name": "string._.property.text_component.mcfunction"
            },
            "3": {
              "name": "string._.string.mcfunction"
            },
            "4": {
              "name": "storage._.compound_colon.nbt.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.property.score.objective": {
      "patterns": [
        {
          "begin": "(\\\")(objective)(\\\") *(\\:) *(?=[^\\s\\,\\}])",
          "end": "(?=\\n)|(?= *[\\,\\}])",
          "patterns": [
            {
              "include": "#text_component.string.objective"
            },
            {
              "include": "#error.compound_value"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            },
            "2": {
              "name": "string._.property.text_component.mcfunction"
            },
            "3": {
              "name": "string._.string.mcfunction"
            },
            "4": {
              "name": "storage._.compound_colon.nbt.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.property.score.value": {
      "patterns": [
        {
          "begin": "(\\\")(value)(\\\") *(\\:) *(?=[^\\s\\,\\}])",
          "end": "(?=\\n)|(?= *[\\,\\}])",
          "patterns": [
            {
              "include": "#text_component.atomic"
            },
            {
              "include": "#error.compound_value"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            },
            "2": {
              "name": "string._.property.text_component.mcfunction"
            },
            "3": {
              "name": "string._.string.mcfunction"
            },
            "4": {
              "name": "storage._.compound_colon.nbt.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.property.selector": {
      "patterns": [
        {
          "begin": "(\\\")(selector)(\\\") *(\\:) *(?=[^\\s\\,\\}])",
          "end": "(?=\\n)|(?= *[\\,\\}])",
          "patterns": [
            {
              "include": "#text_component.string.target"
            },
            {
              "include": "#error.compound_value"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            },
            "2": {
              "name": "string._.property.text_component.mcfunction"
            },
            "3": {
              "name": "string._.string.mcfunction"
            },
            "4": {
              "name": "storage._.compound_colon.nbt.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.property.text_translate": {
      "patterns": [
        {
          "begin": "(\\\")(text|translate)(\\\") *(\\:) *(?=[^\\s\\,\\}])",
          "end": "(?=\\n)|(?= *[\\,\\}])",
          "patterns": [
            {
              "include": "#text_component.atomic"
            },
            {
              "include": "#error.compound_value"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            },
            "2": {
              "name": "string._.property.text_component.mcfunction"
            },
            "3": {
              "name": "string._.string.mcfunction"
            },
            "4": {
              "name": "storage._.compound_colon.nbt.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.string": {
      "patterns": [
        {
          "include": "#common.double_quoted_string"
        }
      ]
    },
    "text_component.string.click_event": {
      "patterns": [
        {
          "begin": "(\\\")",
          "end": "(?=\\n)|(\\\")",
          "patterns": [
            {
              "name": "string._.event.property.text_component.mcfunction",
              "match": "(open_url|open_file|run_command|suggest_command|change_page)"
            },
            {
              "include": "#error.double_quoted_string.content"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.string.color": {
      "patterns": [
        {
          "begin": "(\\\")",
          "end": "(?=\\n)|(\\\")",
          "patterns": [
            {
              "name": "string._.color.property.text_component.mcfunction",
              "match": "(black|dark_blue|dark_green|dark_aqua|dark_red|dark_purple|gold|gray|dark_gray|blue|green|aqua|red|light_purple|yellow|white)"
            },
            {
              "include": "#error.double_quoted_string.content"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.string.hover_event": {
      "patterns": [
        {
          "begin": "(\\\")",
          "end": "(?=\\n)|(\\\")",
          "patterns": [
            {
              "name": "string._.event.property.text_component.mcfunction",
              "match": "(show_text|show_item|show_entity)"
            },
            {
              "include": "#error.double_quoted_string.content"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.string.keybind": {
      "patterns": [
        {
          "begin": "(\\\")",
          "end": "(?=\\n)|(\\\")",
          "patterns": [
            {
              "name": "string._.keybind.property.text_component.mcfunction",
              "match": "(key\\.forward|key\\.left|key\\.back|key\\.right|key\\.jump|key\\.sneak|key\\.sprint|key\\.inventory|key\\.swapHands|key\\.drop|key\\.use|key\\.attack|key\\.pickItem|key\\.chat|key\\.playerlist|key\\.command|key\\.screenshot|key\\.togglePerspective|key\\.smoothCamera|key\\.fullscreen|key\\.spectatorOutlines|key\\.hotbar\\.1|key\\.hotbar\\.2|key\\.hotbar\\.3|key\\.hotbar\\.4|key\\.hotbar\\.5|key\\.hotbar\\.6|key\\.hotbar\\.7|key\\.hotbar\\.8|key\\.hotbar\\.9|key\\.saveToolbarActivator|key\\.loadToolbarActivator)"
            },
            {
              "include": "#error.double_quoted_string.content"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.string.nbt": {
      "patterns": [
        {
          "begin": "(\\\")",
          "end": "(?=\\n)|(\\\")",
          "patterns": [
            {
              "include": "#text_component.string.nbt.content"
            },
            {
              "include": "#error.double_quoted_string.content"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.string.nbt.content": {
      "patterns": [
        {
          "include": "#nbt_path"
        }
      ]
    },
    "text_component.string.objective": {
      "patterns": [
        {
          "begin": "(\\\")",
          "end": "(?=\\n)|(\\\")",
          "patterns": [
            {
              "include": "#text_component.string.objective.content"
            },
            {
              "include": "#error.double_quoted_string.content"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.string.objective.content": {
      "patterns": [
        {
          "name": "entity.other.attribute-name._.scoreboard_objective.mcfunction",
          "match": "(?\u003c=\\\")([\\w\\.\\-\\+]+)(?=\\\")"
        }
      ]
    },
    "text_component.string.position": {
      "patterns": [
        {
          "begin": "(\\\")",
          "end": "(?=\\n)|(\\\")",
          "patterns": [
            {
              "include": "#text_component.string.position.content"
            },
            {
              "include": "#error.double_quoted_string.content"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.string.position.content": {
      "patterns": [
        {
          "match": "(?\u003c=\\\")(?:(\\~)(\\-?\\d*\\.?\\d+)?|(\\-?\\d*\\.?\\d+)) (?:(\\~)(\\-?\\d*\\.?\\d+)?|(\\-?\\d*\\.?\\d+)) (?:(\\~)(\\-?\\d*\\.?\\d+)?|(\\-?\\d*\\.?\\d+))(?=\\\")",
          "captures": {
            "1": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "3": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "4": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "5": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "7": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "8": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "9": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            }
          }
        },
        {
          "match": "(?\u003c=\\\")(\\^)(\\-?\\d*\\.?\\d+)? (\\^)(\\-?\\d*\\.?\\d+)? (\\^)(\\-?\\d*\\.?\\d+)?(?=\\\")",
          "captures": {
            "1": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "3": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "4": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "5": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.string.score_holder": {
      "patterns": [
        {
          "begin": "(\\\")",
          "end": "(?=\\n)|(\\\")",
          "patterns": [
            {
              "include": "#text_component.string.score_holder.content"
            },
            {
              "include": "#error.double_quoted_string.content"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.string.score_holder.content": {
      "patterns": [
        {
          "name": "support.class._.all.score_holder.mcfunction",
          "match": "(?\u003c=\\\")(\\*)(?=\\\")"
        },
        {
          "name": "support.class._.fakeplayer.score_holder.mcfunction",
          "match": "(?\u003c=\\\")([\\w\\.\\-\\#\\$\\%]+)(?=\\\")"
        },
        {
          "include": "#text_component.string.target.content"
        }
      ]
    },
    "text_component.string.target": {
      "patterns": [
        {
          "begin": "(\\\")",
          "end": "(?=\\n)|(\\\")",
          "patterns": [
            {
              "include": "#text_component.string.target.content"
            },
            {
              "include": "#error.double_quoted_string.content"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.string.target.content": {
      "patterns": [
        {
          "name": "support.class._.base.target_selector.mcfunction",
          "match": "(?\u003c=\\\")(\\@[parse])(?=\\\")"
        },
        {
          "name": "support.class._.uuid.target.mcfunction",
          "match": "(?\u003c=\\\")([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4})(?=\\\")"
        },
        {
          "name": "support.class._.player_name.target.mcfunction",
          "match": "(?\u003c=\\\")(\\w+)(?=\\\")"
        },
        {
          "begin": "(?\u003c=\\\")(\\@[parse])(\\[)(?= *[\\w\\]])",
          "end": "(?=\\n)|(?=\\\")|(\\])(?=\\\")",
          "patterns": [
            {
              "include": "#target_selector.content"
            },
            {
              "include": "#error.double_quoted_string.content"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.bracket.target_selector.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "support.class._.bracket.target_selector.mcfunction"
            }
          }
        }
      ]
    },
    "unknown": {
      "name": "meta._.unknown.mcfunction",
      "match": "^((.*))$",
      "captures": {
        "1": {
          "name": "invalid.illegal._.invalid.mcfunction"
        },
        "2": {
          "name": "markup.underline._.underline.mcfunction"
        }
      }
    }
  }
}
